<?php
/*
 * Intergrate Trackfield with Views
 */
 
function trackfield_views_api() {
  return array(
    'api' => 3, 
    'path' => drupal_get_path('module', 'trackfield') . '/includes',
  );
}


/*
 * When we compare tracks, how shall we normalise them?
 */

DEFINE('TRACKFIELD_NORM_NOTHING', 'N');
DEFINE('TRACKFIELD_NORM_FORWARD', 'F');
DEFINE('TRACKFIELD_NORM_REVERSE', 'R');
DEFINE('TRACKFIELD_NORM_AS_CLIMB', 'C');
DEFINE('TRACKFIELD_NORM_AS_DESCENT', 'D');

DEFINE('TRACKFIELD_DEFAULT_NORM', TRACKFIELD_NORM_NOTHING);

global $_trackfield_norm_types;
$_trackfield_norm_types = array(
  TRACKFIELD_NORM_NOTHING => 'Default',
  TRACKFIELD_NORM_FORWARD => 'Forward',
  TRACKFIELD_NORM_REVERSE => 'Reverse',
  TRACKFIELD_NORM_AS_CLIMB => 'As Climb',
  TRACKFIELD_NORM_AS_DESCENT => 'As Descent'
);

DEFINE('TRACKFIELD_METRIC_M_MAX', 10000);


/*
 * Hook menu.
 */

function trackfield_menu() {
  $items = array();

  $access = user_access('administer trackfield');

  $items['admin/settings/trackfield'] = array(
    'title' => 'Trackfield',
    'description' => 'Settings for track co-ordinate fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_trackfield_admin_units'),
    'access arguments' => array('administer trackfield'));

  $items['admin/settings/trackfield/units'] = array(
    'title' => 'Units',
    'description' => 'Settings for track co-ordinate fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_trackfield_admin_units'),
    'access arguments' => array('administer trackfield'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10);

  return $items;
}

/*
 * Hook node_update.
 */
function trackfield_node_update($node) {
		/* Overwrite locations with ours if previously calculated */      
      if (isset($node->trackfield_locations) && (is_array($node->trackfield_locations))) {
        $tid = 0;
        $lid = 0;
        
        while (array_key_exists($tid, $node->trackfield_locations)) {
          if (array_key_exists($lid, $node->locations)) {
            /*
             * We cannot just overwrite existing locations or they will
             * be created and not ammended by the loction module.
             */
            $node->locations[$lid]['longitude'] = $node->trackfield_locations[$tid]['longitude'];
            $node->locations[$lid]['latitude'] = $node->trackfield_locations[$tid]['latitude'];
          } 
          else {
            $node->locations[$lid] = $node->trackfield_locations[$tid];
          }
          $tid++;
          $lid++;
        }
        /* Remove any other locations */
        while (array_key_exists($lid, $node->locations)) {
          $node->locations[$lid]['longitude'] = '';
          $node->locations[$lid]['latitude'] = '';
          $lid++;
        }
      }  
  }

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implementation of hook_field_info().
 *
 * Provides the description of the field.
 */
function trackfield_field_info() {
  return array(
    'track' => array(
      'label' => t('Track'),
      'default_widget' => 'trackfield_text',
      'default_formatter' => 'trackfield_unformatted',
    ),
  );
}

function _trackfield_field_item_dataset(&$item, $settype, $setdata) {
  $item[$settype] = join(',', $setdata);
  if (array_key_exists('trackdatasets', $item)) {
    $item['trackdatasets'] .= ",$settype";
  } 
  else {
    $item['trackdatasets'] = $settype;
  }
}

/**
 * Implements hook_field_delete().
 */
function trackfield_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {

  db_delete('trackfield_datasets')
  ->condition('nid', $entity->nid, '=')
  ->execute();
  }

function trackfield_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
	
	db_delete('trackfield_datasets')
  ->condition('nid', $entity->nid, '=')
  ->condition('vid', $entity->vid, '=')
  ->execute();
  
  }

/**
 * Implements hook_field_validate().
 */
function trackfield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if (is_array($items)) {
        foreach ($items as $delta => $item) {
          if ($item['value'] != '') {
            unset($errstr);
            $errs = module_invoke_all('trackfield_validate', $item, $entity, $delta, $langcode);
          foreach ($errs as $errstr => $message) {
           	$errors[$field['field_name']][$langcode][$delta][] = array('error' => $message, 'message' => $errstr);
           	}
          };
        }
  }
}

/**
 * Implements hook_field_presave().
 */
function trackfield_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];  
  /*
       * We have to traverse the array in this slightly odd manner
       * as we're going to change it's contents.
       */  
  foreach (array_keys($items) as $delta) {
        $item = $items[$delta];
        $itemdata = array();
        if ($item['value'] != '') {
          $itemdata = module_invoke_all('trackfield_submit', $item, $entity, $delta, $langcode);
          
           /*
           * Invoke any post-data processing.
           * We don't use module_invoke_all because we'd like the hooks
           * to be able to modify itemdata/node content.
           */
          $hook = 'trackfield_postprocess';
          foreach (module_implements($hook) as $module) {
            $function = $module . '_' . $hook;
            $function($item, $entity, $itemdata);
          }          
          
          /* Set the 'is_climb' flag if there is altitude data */
          $itemdatasets = $itemdata['datasets'];
          if (array_key_exists('altitude', $itemdatasets) &&
            is_array($itemdatasets['altitude'])) {
            $as = $itemdatasets['altitude'][0];
            $ae = $itemdatasets['altitude'][count($itemdatasets['altitude']) - 1];
            $is_climb = $ae > $as ? TRUE : FALSE;
            $has_alt = TRUE;
          }

          /*
           * If we are normalising data, reverse setdata as we store
           * it here.
           */

          $reverse = FALSE;
          switch ($settings['normalise']) {
            case TRACKFIELD_NORM_NOTHING:
            case TRACKFIELD_NORM_FORWARD:
              break;

            case TRACKFIELD_NORM_REVERSE:
              $reverse = TRUE;
              $is_climb = !$is_climb;
              break;

            case TRACKFIELD_NORM_AS_CLIMB:
              if ($has_alt && !$is_climb) {
                $reverse = TRUE;
                $is_climb = TRUE;
              }
              break;
              
            case TRACKFIELD_NORM_AS_DESCENT:
              if ($has_alt && $is_climb) {
                $reverse = TRUE;
                $is_climb = FALSE;
              }
              break;
          }
          foreach ($itemdatasets as $settype => $setdata) {
            if ($reverse) {
              if (in_array($settype, array('distance', 'time'))) {
                /* Spacial co-ords are a bit different */
                $points = count($setdata);
                $tmp_arr = array();
                $max = $setdata[$points - 1];
                for ($lp = $points - 1; $lp >= 0; $lp--) {
                  $tmp_arr[] = $max - $setdata[$lp];
                }
                $item[$settype] = $tmp_arr;
              } 
              else {
                $item[$settype] = array_reverse($setdata);
              }
            } 
            else {
              $item[$settype] = $setdata;
            }
          }
          $attributes = array(); // Throwing an error if not set here.
          $item['trackdatasets'] = join(',', array_keys($itemdatasets));
          if (array_key_exists('attributes', $itemdata) && is_array($itemdata['attributes'])) {
            $attributes = $itemdata['attributes'];
          }
          if ($is_climb) {$attributes['is_climb'] = $is_climb;}
          $item['attributes'] = serialize($attributes);
          $items[$delta] = $item;
			 
          /*
           * If the location module is in use...
           * ... and number of locations per node of this type > 0...
           * ... and this widget is configured to take location from:
           * 
           * If we have been given longitude/latitude (which implies
           * distance should also be here).
           *
           * Then calculate which point closest to the centre of the
           * track and save this point for later use as node location.
           */
          /* TODO: move this to a separate module using hook_trackfield_postprocess */
          if (module_exists('location') &&
            variable_get('location_maxnum_' . $entity->type, 0) &&
            $settings['take_location']) {
            if (array_key_exists('longitude', $itemdatasets) &&
              array_key_exists('latitude', $itemdatasets)) {
              /* Find the point nearest the centre */
              $dsta = $itemdatasets['distance'];
              /* TODO: make path point configurable */
              $halfway = $dsta[count($dsta) - 1] / 2;
              for ($lp = 0; $lp < count($dsta) && $dsta[$lp] < $halfway; $lp++) {
                /* Do nothing - we're just looking for the middle */
              }
              $entity->trackfield_loactions[] = array(
                'longitude' => $itemdatasets['longitude'][$lp],
                'latitude' => $itemdatasets['latitude'][$lp]);
            }
          }
        }
      }
     }

/**
 * Implements hook_field_update().
 */
function trackfield_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  
  trackfield_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);

    }

/**
 * Implements hook_field_insert().
 */
function trackfield_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
    
      /* Check and queue if module is on, otherwise just insert now. */
      if (!module_exists('trackfield_queue') || !_trackfield_queue_check_queue($items, $entity)) {
        foreach ($items as $delta => $item) {
          /*
           * If the hooks generated some datasets, store them.
           * Delete whatever is there first - perhaps some will have
           * been removed.
           */
           
          db_delete('trackfield_datasets')
          ->condition ('nid', $entity->nid, '=')
          ->condition ('vid', $entity->vid, '=')
          ->condition ('field_name', $field['field_name'], '=')
          ->condition ('delta', $delta, '=')
          ->execute();
          
          if (array_key_exists('trackdatasets', $item)) {
          	foreach (explode(',', $item['trackdatasets']) as $settype) {            	
              db_insert('trackfield_datasets')
              ->fields(array(
            	  'nid' => $entity->nid,
            	  'vid' => $entity->vid,
            	  'field_name' => $field['field_name'],
            	  'delta' => $delta,
            	  'settype' => $settype,
            	  'setdata' => implode(',', $item[$settype]),))
              ->execute();
            }
          ;}
        ;}
      }
     }


/**
 * Implements hook_field_is_empty().
 */
function trackfield_field_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/***********************************************************************
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the
 *  user.
 **********************************************************************/

/**
 * Implements hook_field_formatter_info().
 */
function trackfield_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('trackfield_unformatted'),
      'field types' => array('track'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function trackfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if (is_null($item['value'])) {
    return '';
    }  
  
  $element = array(
    '#type' => 'fieldset',
    '#title' => t('Trackfield'),
    );

  switch ($display['type']) {
    /* We only know how to dump it as 'raw' right now. */
    case 'default':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = check_plain($item['value']);
      }
      
      return $element;
      break;
  }
  
  /* This should never happen */
  return '';

}


/**************************************************************************
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 **************************************************************************/

/**
 * Implements hook_field_widget_info().
 */
function trackfield_field_widget_info() {
  return array(
    'trackfield_text' => array(
      'label' => t('Text Field'), 
      'field types' => array('track'), 
    ), 
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function trackfield_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'trackfield_text') {
  global $_trackfield_norm_types;
    $form['normalise'] = array(
        '#type' => 'select',
        '#title' => t('Normalise As'),
        '#default_value' => isset($settings['normalise']) ? $settings['normalise'] : '',
        '#options' => $_trackfield_norm_types,
      );
    $form['take_location'] = array(
        '#type' => 'select',
        '#title' => t('Use co-ordinates from this track to overwrite node location where possible'),
        '#default_value' => isset($settings['take_location']) ? $settings['take_location'] : '0',
        '#options' => array('1' => 'Yes', '0' => 'No')
      );
    }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
 
function trackfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  $valuetype = isset($items[$delta]['valuetype']) ? $items[$delta]['valuetype'] : '';
  
  switch ($instance['widget']['type']) {
	
    case 'trackfield_text':
    $element = array(
    	'#type' => 'fieldset',
    	'#title' => 'Trackfield',
    	);
    $element['value'] = array();
    $element['valuetype'] = array();
    $valuetypes = module_invoke_all('trackfield_valuetypes');
    $element['valuetype'] += array(
      '#type' => 'select',
      '#title' => t('Treat data as...'),
		'#default_value' => $valuetype,
      '#options' => $valuetypes,
      );
      
      $element['value'] += array(
        '#type' => 'textarea',
        '#title' => t('Data'),
		  '#rows' => 3,
		  '#weight' => -1,
		  '#required' => FALSE,
        '#default_value' => $value,	
      );
      break;

  }
  return $element;
}

/*
 * Trackfield internal functions
 */
     
/*
 * Function to return list of field names in the current system
 * that are of trackfield type.
 */

function _trackfield_fields() {
	
  /* Cache the list in this static var */
  static $field_list;
  if (is_array($field_list)) { 
    return $field_list; }

  $fields = field_info_fields();
  $field_list = array();

  foreach ($fields as $key => $value) {
  if ($value['type'] == 'track') {
    $field_list[] = $key;
    };
  }
  return $field_list;
}   

/*
 * Functions to work out distance between lat/lon pairs.
 * Figure this is useful to have in here as many other related
 * modules will want to do this.
 * 
 * The two functions for this purpose were taken from a perl version
 * originally at http://www.indo.com/distance/dist.pl
 * 
 * From the original file:
 * 
 * This code was written in 1998 by Darrell Kindred <dkindred@cmu.edu>.
 * I have released it into the public domain.  Do what you like with it,
 * but if you make any modifications, please either list your name and
 * describe the changes here, or remove my name and address above.
 *
 * This code is distributed without any warranty, express or implied. 
 * 
 * Calculate the great-circle distance and initial heading from one point on
 * the Earth to another, given latitude & longitude.
 * 
 * Calculations assume a spherical Earth with radius 6367 km.  
 * (I think this should cause no more than 0.2% error.)
 */


function _trackfield_degrees_to_radians($deg) {
    return($deg * M_PI / 180.0);
}
  
function _trackfield_great_circle_distance($lat1, $lon1, $lat2, $lon2) {
  $lat1 = _trackfield_degrees_to_radians($lat1);
  $lon1 = _trackfield_degrees_to_radians($lon1);
  $lat2 = _trackfield_degrees_to_radians($lat2);
  $lon2 = _trackfield_degrees_to_radians($lon2);
  
  /*
   * Approx radius of Earth in meters.  True radius varies from
   * 6357km (polar) to 6378km (equatorial).
   */
  $earth_radius = 6367;

  $dlon = $lon2 - $lon1;
  $dlat = $lat2 - $lat1;
  $a = pow((sin($dlat / 2)), 2)
      + cos($lat1) * cos($lat2) * pow(sin($dlon / 2), 2);
  $d = 2 * atan2(sqrt($a), sqrt(1 - $a));

  # This is a simpler formula, but it's subject to rounding errors
  # for small distances.  See http://www.census.gov/cgi-bin/geo/gisfaq?Q5.1
  # my $d = &acos(sin($lat1) * sin($lat2)
  #               + cos($lat1) * cos($lat2) * cos($long1-$long2));

  return($earth_radius * $d * 1000);
}

/*
 * Admin functions.
 */

function _trackfield_admin_units() {
  $form = array();
  $form[] = array(
    '#type' => 'markup',
    '#value' => t('These settings are for future use. And <strong>do not actually do anything!</strong>')
  );
  $form['trackfield_distance_units'] = array(
    '#type' => 'select',
    '#title' => t('Distance Units'),
    '#default_value' => variable_get('trackfield_distance_units', 'metric'),
    '#options' => array(
      'metric' => t('Metric (Km/m)'),
      'statute' => t('Statute (Mile/ft)'),
    )
  );
  $form['trackfield_altitude_units'] = array(
    '#type' => 'select',
    '#title' => t('Altitude Units'),
    '#default_value' => variable_get('trackfield_altitude_units', 'metric'),
    '#options' => array(
      'metric' => t('Metric (m)'),
      'imperial' => t('Imperial (ft)'),
    )
  );
  $form['trackfield_user_units'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow user to override site settings.'),
    '#default_value' => variable_get('trackfield_user_units', 0)
  );
  return system_settings_form($form);
}