<?php
/**
 * @file
 * Trackfield WKT outputs a Track as WKT Linestring.
 *
 * This field can be used to output tracks using the Views and Openlayers.
 */

/**
 * Implements hook_field_info().
 */
function trackfield_wkt_field_info() {
  return array(
    'trackwkt' => array(
      'label' => t('Track WKT'),
      'description' => t('Outputs Track Lat/Lon data as WKT Linestring, compatible with Openlayers Views.'),
      'default_widget' => 'trackfield_wkt_text',
      'default_formatter' => 'trackfield_wkt_linestring',
    ),
  );
}

/**
 * Implements hook_field_presave().
 */
function trackfield_wkt_field_presave ($entity_type, $entity, $field, $instance, $langcode, &$items, &$errors) {
  $settings = $field['settings'];
  $field_name = $settings['reference_field_name'];
  $fset = $entity->{$field_name}[$langcode];

  foreach ($items as $delta => $item) {
    if ($fset[$delta]['value'] != '') {
      // If we have to normalise  - set norm_factor.
      $norm_factor = 1;
        /*$fset_attr = unserialize($fset[$delta]['attributes']);
        if ($settings['normalise'] == TRACKFIELD_NORM_REVERSE) {
          _trackfield_wkt_reverse_op($op, $norm_factor);
        }*/

      $lat = $fset[$delta]['latitude'];
      $lon = $fset[$delta]['longitude'];

      $i = 0;
      $output = 'LINESTRING (';
      $limit = count($lat) - 1;
      while($i <= $limit) {
        $output .= $lon[$i];
        $output .= ' ' . $lat[$i];
        if ($i != $limit) { $output .= ', '; }
        $i++;
      }
      $output .= ')';
      $items[$delta]['value'] = $output;
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function trackfield_wkt_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Implementation of hook_field_settings_form().
 */
function trackfield_wkt_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array(
    'reference_field_name' => array(
      '#type' => 'textfield',
      '#rows' => 1,
      '#title' => t('Reference Field Name'),
      '#default_value' => isset($settings['reference_field_name']) ? $settings['reference_field_name'] : '',
      '#required' => true,
    ),
  );
  $form['#element_validate'] = array('trackfield_wkt_settings_form_validate');

  return $form;
}

function trackfield_wkt_settings_form_validate($element, &$form_state) {
  $valid_fields = array();
  if (!in_array($element['reference_field_name']['#value'], $valid_fields = _trackfield_fields())) {
    if (array_count_values($valid_fields) == 0) {
      form_set_error('reference_field_name', t('You must specify the reference field of type track, but appear not to have any defined!'));
    } else {
      form_set_error('reference_field_name', t('You must specify the reference field of type track. Valid fields in this system: %fields', array('%fields' => join(', ', $valid_fields))));
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function trackfield_wkt_field_formatter_info() {
  $formatters = array(
    'trackfield_wkt_linestring' => array(
      'label' => t('Linestring'),
      'field types' => array('trackwkt'),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function trackfield_wkt_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  foreach($items as $delta => $item) {
    $value = isset($item['value']) ? check_plain($item['value']) : NULL;
    switch($display['type']) {
      case 'trackfield_wkt_linestring':
      default:
        $element[$delta]['#markup'] = $value;
        break;
    }
    return $element;
  }
}

/**
 * Implements hook_field_widget_info().
 */
function trackfield_wkt_field_widget_info() {
  return array(
    'trackfield_wkt_text' => array(
      'label' => t('Default'),
      'field types' => array('trackwkt'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function trackfield_wkt_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $default_value = isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL;

  // Only show user stats they have previously entered (manual ones).
  // Otherwise calculated stats will not be refresed if the source track changes.
  switch ($instance['widget']['type']) {
    case 'trackfield_wkt_text':
      $element['value'] = array(
        '#type' => 'textfield',
        '#title' => t('WKT'),
        '#maxlength' => 1000000,
        '#default_value' => $default_value,
      );
      break;
  }
  return $element;
}
